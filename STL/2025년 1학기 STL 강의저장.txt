

==============================================================================================================================
저장한 시간: 
==============================================================================================================================

//----------------------------------------------------------------------------
// 2025/1학기 STL
// 3.10 월요일	(1주차 2일)
//----------------------------------------------------------------------------
// save 기능
//----------------------------------------------------------------------------
//----------------------------------------------------------------------------
#include<iostream>
#include<string>
#include<fstream>
#include<algorithm>
#include<filesystem>



// [문제] main을 고치지 말고 실행되게 하라 

void save(std::string_view); // const std::string&의 대체품, 쓰기 불가 읽기만 가능한 객체 

int main() {
	std::cout << "2025년 1학기 STL" << '\n';//살짝 더 빠름 근데 dos창 안쓰잖아

	save("main.cpp");

}

void save(std::string_view file_name) {
	//1.인자로 전달된 file_name을 읽기 모드로 열기
	std::ifstream in{ file_name.data() };	//RAII, 자원획득시 초기화
	if ( not in ) {
		std::cout << "Failed to read " << file_name << std::endl;
		// exit(404); 요즘 사용X
	}
	in >> std::noskipws;

	// 저장했다는 것을 화면에 표시하자
	std::cout << file_name << "(" << std::filesystem::file_size(file_name)
		<< "bytes) 저장하였습니다.\n";


	//2.쓰기 모드로 저장할 파일을 덧붙이기 모드로 열기
	std::ofstream out{ "2025년 1학기 STL 강의저장.txt", std::ios::app }; // {}uniform initializer
	
	out << "\n" << "\n";
	out << "==============================================================================================================================\n";
	out << "저장한 시간: " << '\n';
	out << "==============================================================================================================================\n\n";

	//3.쓸 파일을 읽어서 저장할 파일에 덧붙인다.
	std::copy(std::istreambuf_iterator{ in }, {}, std::ostreambuf_iterator(out));
}



==============================================================================================================================
저장한 시간: 
==============================================================================================================================

//----------------------------------------------------------------------------
// 2025/1학기 STL
// 3.10 월요일	(1주차 2일)
//----------------------------------------------------------------------------
// save 기능
//----------------------------------------------------------------------------
//----------------------------------------------------------------------------
#include<iostream>
#include<string>
#include<fstream>
#include<algorithm>
#include<filesystem>



// [문제] main을 고치지 말고 실행되게 하라 

void save(std::string_view); // const std::string&의 대체품, 쓰기 불가 읽기만 가능한 객체 

int main() {
	std::cout << "2025년 1학기 STL" << '\n';//살짝 더 빠름 근데 dos창 안쓰잖아

	save("main.cpp");

}

void save(std::string_view file_name) {
	//1.인자로 전달된 file_name을 읽기 모드로 열기
	std::ifstream in{ file_name.data() };	//RAII, 자원획득시 초기화
	if ( not in ) {
		std::cout << "Failed to read " << file_name << std::endl;
		// exit(404); 요즘 사용X
	}
	in >> std::noskipws;

	// 저장했다는 것을 화면에 표시하자
	std::cout << file_name << "(" << std::filesystem::file_size(file_name)
		<< "bytes) 저장하였습니다.\n";


	//2.쓰기 모드로 저장할 파일을 덧붙이기 모드로 열기
	std::ofstream out{ "2025년 1학기 STL 강의저장.txt", std::ios::app }; // {}uniform initializer
	
	out << "\n" << "\n";
	out << "==============================================================================================================================\n";
	out << "저장한 시간: " << '\n';
	out << "==============================================================================================================================\n\n";

	//3.쓸 파일을 읽어서 저장할 파일에 덧붙인다.
	std::copy(std::istreambuf_iterator{ in }, {}, std::ostreambuf_iterator(out));
}



==============================================================================================================================
저장한 시간: 
==============================================================================================================================

//----------------------------------------------------------------------------
// 2025/1학기 STL
// 3.10 월요일	(1주차 2일)
//----------------------------------------------------------------------------
// save 기능
//----------------------------------------------------------------------------
//----------------------------------------------------------------------------
#include<iostream>
#include<string>
#include<fstream>
#include<algorithm>
#include<filesystem>
#include<chrono>


// [문제] main을 고치지 말고 실행되게 하라 

void save(std::string_view); // const std::string&의 대체품, 쓰기 불가 읽기만 가능한 객체 

int main() {
	std::cout << "2025년 1학기 STL" << '\n';//살짝 더 빠름 근데 dos창 안쓰잖아

	save("main.cpp");

}

void save(std::string_view file_name) {
	//1.인자로 전달된 file_name을 읽기 모드로 열기
	std::ifstream in{ file_name.data() };	//RAII, 자원획득시 초기화
	if ( not in ) {
		std::cout << "Failed to read " << file_name << std::endl;
		// exit(404); 요즘 사용X
	}
	in >> std::noskipws;

	// 저장했다는 것을 화면에 표시하자
	std::cout << file_name << "(" << std::filesystem::file_size(file_name)
		<< "bytes) 저장하였습니다.\n";


	//2.쓰기 모드로 저장할 파일을 덧붙이기 모드로 열기
	std::ofstream out{ "2025년 1학기 STL 강의저장.txt", std::ios::app }; // {}uniform initializer
	//시간을 기록

	auto now = std::chrono::system_clock::now();		//epoch로부터 경과된 tick 수
	std::cout << "현재시간 - " << now << '\n';

	out << "\n" << "\n";
	out << "==============================================================================================================================\n";
	out << "저장한 시간: " << '\n';
	out << "==============================================================================================================================\n\n";

	//3.쓸 파일을 읽어서 저장할 파일에 덧붙인다.
	std::copy(std::istreambuf_iterator{ in }, {}, std::ostreambuf_iterator(out));
}



==============================================================================================================================
저장한 시간: 
==============================================================================================================================

//----------------------------------------------------------------------------
// 2025/1학기 STL
// 3.10 월요일	(1주차 2일)
//----------------------------------------------------------------------------
// save 기능
//----------------------------------------------------------------------------
//----------------------------------------------------------------------------
#include<iostream>
#include<string>
#include<fstream>
#include<algorithm>
#include<filesystem>
#include<chrono>


// [문제] main을 고치지 말고 실행되게 하라 

void save(std::string_view); // const std::string&의 대체품, 쓰기 불가 읽기만 가능한 객체 

int main() {
	std::cout << "2025년 1학기 STL" << '\n';//살짝 더 빠름 근데 dos창 안쓰잖아

	save("main.cpp");

}

void save(std::string_view file_name) {
	//1.인자로 전달된 file_name을 읽기 모드로 열기
	std::ifstream in{ file_name.data() };	//RAII, 자원획득시 초기화
	if ( not in ) {
		std::cout << "Failed to read " << file_name << std::endl;
		// exit(404); 요즘 사용X
	}
	in >> std::noskipws;

	// 저장했다는 것을 화면에 표시하자
	std::cout << file_name << "(" << std::filesystem::file_size(file_name)
		<< "bytes) 저장하였습니다.\n";


	//2.쓰기 모드로 저장할 파일을 덧붙이기 모드로 열기
	std::ofstream out{ "2025년 1학기 STL 강의저장.txt", std::ios::app }; // {}uniform initializer
	//시간을 기록
	using namespace std::chrono_literals;
	auto now = std::chrono::system_clock::now();		//epoch로부터 경과된 tick 수
	std::cout << "현재시간 - " << now + 9h << '\n';

	out << "\n" << "\n";
	out << "==============================================================================================================================\n";
	out << "저장한 시간: " << '\n';
	out << "==============================================================================================================================\n\n";

	//3.쓸 파일을 읽어서 저장할 파일에 덧붙인다.
	std::copy(std::istreambuf_iterator{ in }, {}, std::ostreambuf_iterator(out));
}



==============================================================================================================================
저장한 시간: 
==============================================================================================================================

//----------------------------------------------------------------------------
// 2025/1학기 STL
// 3.10 월요일	(1주차 2일)
//----------------------------------------------------------------------------
// save 기능
//----------------------------------------------------------------------------
//----------------------------------------------------------------------------
#include<iostream>
#include<string>
#include<fstream>
#include<algorithm>
#include<filesystem>
#include<chrono>


// [문제] main을 고치지 말고 실행되게 하라 

void save(std::string_view); // const std::string&의 대체품, 쓰기 불가 읽기만 가능한 객체 

int main() {
	std::cout << "2025년 1학기 STL" << '\n';//살짝 더 빠름 근데 dos창 안쓰잖아

	save("main.cpp");

}

void save(std::string_view file_name) {
	//1.인자로 전달된 file_name을 읽기 모드로 열기
	std::ifstream in{ file_name.data() };	//RAII, 자원획득시 초기화
	if ( not in ) {
		std::cout << "Failed to read " << file_name << std::endl;
		// exit(404); 요즘 사용X
	}
	in >> std::noskipws;

	// 저장했다는 것을 화면에 표시하자
	std::cout << file_name << "(" << std::filesystem::file_size(file_name)
		<< "bytes) 저장하였습니다.\n";


	//2.쓰기 모드로 저장할 파일을 덧붙이기 모드로 열기
	std::ofstream out{ "2025년 1학기 STL 강의저장.txt", std::ios::app }; // {}uniform initializer
	//시간을 기록
	auto now = std::chrono::system_clock::now();			//epoch로부터 경과된 tick 수
	auto utc = std::chrono::system_clock::to_time_t( now );	//UTC로 변환
	auto lt = std::localtime(&utc);							//os의 지역시간으로 변경
	auto old = out.imbue(std::locale("ko_KR"));				//stream의 지역을 변경
	
	std::cout << "현재시간 - " << std::put_time(lt, "%c, %A") << "\n";

	out.imbue(old);											//복구
	out << "\n" << "\n";
	out << "==============================================================================================================================\n";
	out << "저장한 시간: " << '\n';
	out << "==============================================================================================================================\n\n";

	//3.쓸 파일을 읽어서 저장할 파일에 덧붙인다.
	std::copy(std::istreambuf_iterator{ in }, {}, std::ostreambuf_iterator(out));
}



==============================================================================================================================
저장한 시간: 2025-03-10 오후 7:03:28, 월요일
==============================================================================================================================

//----------------------------------------------------------------------------
// 2025/1학기 STL
// 3.10 월요일	(1주차 2일)
//----------------------------------------------------------------------------
// save 기능
//----------------------------------------------------------------------------
//----------------------------------------------------------------------------
#include<iostream>
#include<string>
#include<fstream>
#include<algorithm>
#include<filesystem>
#include<chrono>


// [문제] main을 고치지 말고 실행되게 하라 

void save(std::string_view); // const std::string&의 대체품, 쓰기 불가 읽기만 가능한 객체 

int main() {
	std::cout << "2025년 1학기 STL" << '\n';//살짝 더 빠름 근데 dos창 안쓰잖아

	save("main.cpp");

}

void save(std::string_view file_name) {
	//1.인자로 전달된 file_name을 읽기 모드로 열기
	std::ifstream in{ file_name.data() };	//RAII, 자원획득시 초기화
	if ( not in ) {
		std::cout << "Failed to read " << file_name << std::endl;
		// exit(404); 요즘 사용X
	}
	in >> std::noskipws;

	// 저장했다는 것을 화면에 표시하자
	std::cout << file_name << "(" << std::filesystem::file_size(file_name)
		<< "bytes) 저장하였습니다.\n";


	//2.쓰기 모드로 저장할 파일을 덧붙이기 모드로 열기
	std::ofstream out{ "2025년 1학기 STL 강의저장.txt", std::ios::app }; // {}uniform initializer
	//시간을 기록
	auto now = std::chrono::system_clock::now();			//epoch로부터 경과된 tick 수
	auto utc = std::chrono::system_clock::to_time_t( now );	//UTC로 변환
	auto lt = std::localtime(&utc);							//os의 지역시간으로 변경
	auto old = out.imbue(std::locale("ko_KR"));				//stream의 지역을 변경
	
	out << "\n" << "\n";
	out << "==============================================================================================================================\n";
	out << "저장한 시간: " << std::put_time(lt, "%c, %A") << '\n';
	out << "==============================================================================================================================\n\n";
	out.imbue(old);											//복구
	//3.쓸 파일을 읽어서 저장할 파일에 덧붙인다.
	std::copy(std::istreambuf_iterator{ in }, {}, std::ostreambuf_iterator(out));
}



==============================================================================================================================
저장한 시간: 2025-03-10 오후 7:03:46, 월요일
==============================================================================================================================

//----------------------------------------------------------------------------
// 2025/1학기 STL
// 3.10 월요일	(1주차 2일)
//----------------------------------------------------------------------------
// save 기능
//----------------------------------------------------------------------------
//----------------------------------------------------------------------------
#include<iostream>
#include<string>
#include<fstream>
#include<algorithm>
#include<filesystem>
#include<chrono>


// [문제] main을 고치지 말고 실행되게 하라 

void save(std::string_view); // const std::string&의 대체품, 쓰기 불가 읽기만 가능한 객체 

int main() {
	std::cout << "2025년 1학기 STL" << '\n';//살짝 더 빠름 근데 dos창 안쓰잖아

	save("main.cpp");

}

void save(std::string_view file_name) {
	//1.인자로 전달된 file_name을 읽기 모드로 열기
	std::ifstream in{ file_name.data() };	//RAII, 자원획득시 초기화
	if ( not in ) {
		std::cout << "Failed to read " << file_name << std::endl;
		// exit(404); 요즘 사용X
	}
	in >> std::noskipws;

	// 저장했다는 것을 화면에 표시하자
	std::cout << file_name << "(" << std::filesystem::file_size(file_name)
		<< "bytes) 저장하였습니다.\n";


	//2.쓰기 모드로 저장할 파일을 덧붙이기 모드로 열기
	std::ofstream out{ "2025년 1학기 STL 강의저장.txt", std::ios::app }; // {}uniform initializer
	//시간을 기록
	auto now = std::chrono::system_clock::now();			//epoch로부터 경과된 tick 수
	auto utc = std::chrono::system_clock::to_time_t( now );	//UTC로 변환
	auto lt = std::localtime(&utc);							//os의 지역시간으로 변경
	auto old = out.imbue(std::locale("ko_KR"));				//stream의 지역을 변경
	
	out << "\n" << "\n";
	out << "==============================================================================================================================\n";
	out << "저장한 시간: " << std::put_time(lt, "%c, %A") << '\n';
	out << "==============================================================================================================================\n\n";
	out.imbue(old);											//복구
	//3.쓸 파일을 읽어서 저장할 파일에 덧붙인다.
	std::copy(std::istreambuf_iterator{ in }, {}, std::ostreambuf_iterator(out));
}



==============================================================================================================================
저장한 시간: 2025-03-13 오후 5:37:46, 목요일
==============================================================================================================================

//----------------------------------------------------------------------------
// 2025/1학기 STL
// 3.10 월요일	(1주차 2일)
//----------------------------------------------------------------------------
// save 기능
//----------------------------------------------------------------------------
//----------------------------------------------------------------------------
#include<iostream>
#include"save.h"


// [문제] main을 고치지 말고 실행되게 하라 



int main() {
	std::cout << "2025년 1학기 STL" << '\n';//살짝 더 빠름 근데 dos창 안쓰잖아

	save("main.cpp");

}




==============================================================================================================================
저장한 시간: 2025-03-13 오후 5:39:09, 목요일
==============================================================================================================================

//----------------------------------------------------------------------------
// 2025/1학기 STL
// 3.10 월요일	(1주차 2일)
//----------------------------------------------------------------------------
// save 기능
//----------------------------------------------------------------------------
//----------------------------------------------------------------------------
#include<iostream>
#include"save.h"


// [문제] main을 고치지 말고 실행되게 하라 



int main() {
	std::cout << "2025년 1학기 STL" << '\n';//살짝 더 빠름 근데 dos창 안쓰잖아

	save("main.cpp");
	save("save.h");
	save("save.cpp");
}

==============================================================================================================================
저장한 시간: 2025-03-13 오후 5:39:09, 목요일
==============================================================================================================================

#pragma once
//-------------------------------------------------------------------
// save.h
//										         		   2025.03.13
//-------------------------------------------------------------------

void save(std::string_view);

==============================================================================================================================
저장한 시간: 2025-03-13 오후 5:39:09, 목요일
==============================================================================================================================

//-------------------------------------------------------------------
// save.cpp - 한학기 강의를 저장
//														   2025.03.13
//-------------------------------------------------------------------


#include<string_view>
#include<fstream>
#include<iostream>
#include<filesystem>
#include<chrono>
#include "save.h"

void save(std::string_view file_name) {
	//1.인자로 전달된 file_name을 읽기 모드로 열기
	std::ifstream in{ file_name.data() };	//RAII, 자원획득시 초기화
	if (not in) {
		std::cout << "Failed to read " << file_name << std::endl;
		// exit(404); 요즘 사용X
	}
	in >> std::noskipws;

	// 저장했다는 것을 화면에 표시하자
	std::cout << file_name << "(" << std::filesystem::file_size(file_name)
		<< "bytes) 저장하였습니다.\n";


	//2.쓰기 모드로 저장할 파일을 덧붙이기 모드로 열기
	std::ofstream out{ "2025년 1학기 STL 강의저장.txt", std::ios::app }; // {}uniform initializer
	//시간을 기록
	auto now = std::chrono::system_clock::now();			//epoch로부터 경과된 tick 수
	auto utc = std::chrono::system_clock::to_time_t(now);	//UTC로 변환
	auto lt = std::localtime(&utc);							//os의 지역시간으로 변경
	auto old = out.imbue(std::locale("ko_KR"));				//stream의 지역을 변경

	out << "\n" << "\n";
	out << "==============================================================================================================================\n";
	out << "저장한 시간: " << std::put_time(lt, "%c, %A") << '\n';
	out << "==============================================================================================================================\n\n";
	out.imbue(old);											//복구
	//3.쓸 파일을 읽어서 저장할 파일에 덧붙인다.
	std::copy(std::istreambuf_iterator{ in }, {}, std::ostreambuf_iterator(out));
}


==============================================================================================================================
저장한 시간: 2025-03-13 오후 5:53:07, 목요일
==============================================================================================================================

//----------------------------------------------------------------------------
// 2025/1학기 STL
// 3.10 월요일	(1주차 2일)
//----------------------------------------------------------------------------
// Generic Programming - 핵심키워드 Templete
//----------------------------------------------------------------------------
#include<iostream>
#include"save.h"


// [문제] main을 고치지 말고 의도대로 실행되게 하라 

void change(int& x, int& y);


int main() {

	int a{ 1 }, b{ 2 };
	change(a, b); //ab바꾸기

	std::cout << a << ", " << b << std::endl;

	save("main.cpp");

}

void change(int& x, int& y) {
	int temp = x;
	x = y;
	y = temp;
}

==============================================================================================================================
저장한 시간: 2025-03-13 오후 5:53:26, 목요일
==============================================================================================================================

//----------------------------------------------------------------------------
// 2025/1학기 STL
// 3.10 월요일	(1주차 2일)
//----------------------------------------------------------------------------
// Generic Programming - 핵심키워드 Templete
//----------------------------------------------------------------------------
#include<iostream>
#include"save.h"


// [문제] main을 고치지 말고 의도대로 실행되게 하라 

void change(int& x, int& y);


int main() {

	int a{ 1 }, b{ 2 };
	change(a, b); //ab바꾸기

	std::cout << a << ", " << b << std::endl;

	save("main.cpp");

}

void change(int& x, int& y) {
	int temp{ x };
	x = y;
	y = temp;
}

==============================================================================================================================
저장한 시간: 2025-03-13 오후 6:05:31, 목요일
==============================================================================================================================

//----------------------------------------------------------------------------
// 2025/1학기 STL
// 3.10 월요일	(1주차 2일)
//----------------------------------------------------------------------------
// Generic Programming - 핵심키워드 Templete
//----------------------------------------------------------------------------
#include<iostream>
#include"save.h"


// [문제] main을 고치지 말고 의도대로 실행되게 하라 
template<typename t>
void change(t& x, t& y);
class Dog {
public:
	Dog();
	Dog(int n) {
		age = n;
	}
	friend std::ostream& operator<<(std::ostream& os, Dog d) {
		return os << d.age;
	}
private:
	int age;
};

int main() {

	{
		Dog a{ 1 }, b{ 2 };
		change(a, b); //ab바꾸기

		std::cout << a << ", " << b << std::endl;
	}

	{
		int a{ 1 }, b{ 2 };
		change(a, b); //ab바꾸기

		std::cout << a << ", " << b << std::endl;
	}

	save("main.cpp");

}
template<typename t>
void change(t& x, t& y) {
	t temp{ x };
	x = y;
	y = temp;
}

==============================================================================================================================
저장한 시간: 2025-03-13 오후 6:06:32, 목요일
==============================================================================================================================

//----------------------------------------------------------------------------
// 2025/1학기 STL
// 3.10 월요일	(1주차 2일)
//----------------------------------------------------------------------------
// Generic Programming - 핵심키워드 Templete
//----------------------------------------------------------------------------
#include<iostream>
#include"save.h"


// [문제] main을 고치지 말고 의도대로 실행되게 하라 
template<typename t>
void change(t& x, t& y);
class Dog {
public:
	Dog();
	Dog(int n) {
		age = n;
	}
	friend std::ostream& operator<<(std::ostream& os, Dog d) {
		return os << d.age;
	}
private:
	int age;
};

int main() {

	{
		Dog a{ 1 }, b{ 2 };
		change(a, b); //ab바꾸기

		std::cout << a << ", " << b << std::endl;
	}

	{
		int a{ 1 }, b{ 2 };
		change(a, b); //ab바꾸기

		std::cout << a << ", " << b << std::endl;
	}

	save("main.cpp");

}
template<typename t>
void change(t& x, t& y) {
	t temp{ x };
	x = y;
	y = temp;
}

==============================================================================================================================
저장한 시간: 2025-03-13 오후 6:15:52, 목요일
==============================================================================================================================

//----------------------------------------------------------------------------
// 2025/1학기 STL
// 3.10 월요일	(1주차 2일)
//----------------------------------------------------------------------------
// Generic Programming - 핵심키워드 Template
//----------------------------------------------------------------------------
#include<iostream>
#include"save.h"


// [문제] main을 고치지 말고 의도대로 실행되게 하라 
template<typename t>
void change(t& x, t& y);
class Dog {
public:
	Dog(int n) : age{ n } {}
	friend std::ostream& operator<<(std::ostream& os, Dog d) {
		return os << d.age;
	}
private:
	int age;
};

int main() {

	{
		Dog a{ 1 }, b{ 2 };
		change(a, b); //ab바꾸기

		std::cout << a << ", " << b << std::endl;
	}

	{
		int a{ 1 }, b{ 2 };
		change(a, b); //ab바꾸기

		std::cout << a << ", " << b << std::endl;
	}

	save("main.cpp");

}
template<typename t>
void change(t& x, t& y) {
	t temp{ x };
	x = y;
	y = temp;
}

==============================================================================================================================
저장한 시간: 2025-03-13 오후 6:16:31, 목요일
==============================================================================================================================

//----------------------------------------------------------------------------
// 2025/1학기 STL
// 3.10 월요일	(1주차 2일)
//----------------------------------------------------------------------------
// Generic Programming - 핵심키워드 Template
//----------------------------------------------------------------------------
#include<iostream>
#include"save.h"


// [문제] main을 고치지 말고 의도대로 실행되게 하라 
template<typename t>
void change(t& x, t& y);
class Dog {
public:
	Dog() = default;
	Dog(int n) : age{ n } {}
	friend std::ostream& operator<<(std::ostream& os, Dog d) {
		return os << d.age;
	}
private:
	int age;
};

int main() {

	{
		Dog a{ 1 }, b{ 2 };
		change(a, b); //ab바꾸기

		std::cout << a << ", " << b << std::endl;
	}

	{
		int a{ 1 }, b{ 2 };
		change(a, b); //ab바꾸기

		std::cout << a << ", " << b << std::endl;
	}

	save("main.cpp");

}
template<typename t>
void change(t& x, t& y) {
	t temp{ x };
	x = y;
	y = temp;
}

==============================================================================================================================
저장한 시간: 2025-03-13 오후 6:25:01, 목요일
==============================================================================================================================

//----------------------------------------------------------------------------
// 2025/1학기 STL
// 3.10 월요일	(1주차 2일)
//----------------------------------------------------------------------------
// Generic Programming - 핵심키워드 Template
//----------------------------------------------------------------------------
#include<iostream>
#include"save.h"


// [문제] main을 고치지 말고 의도대로 실행되게 하라 
template<typename t>
void change(t& x, t& y);
class Dog {
public:
	Dog() = default;
	Dog(int n) : age{ n } {}
	friend std::ostream& operator<<(std::ostream& os, const Dog& d) {
		return os << d.age;
	}
private:
	int age;
};

int main() {

	{
		Dog a{ 1 }, b{ 2 };
		change(a, b); //ab바꾸기

		std::cout << a << ", " << b << std::endl;
	}

	{
		int a{ 1 }, b{ 2 };
		change(a, b); //ab바꾸기

		std::cout << a << ", " << b << std::endl;
	}

	save("main.cpp");

}
template<typename t>
void change(t& x, t& y) {
	t temp{ x };
	x = y;
	y = temp;
}


==============================================================================================================================
저장한 시간: 2025-03-17 오후 5:39:03, 월요일
==============================================================================================================================

//----------------------------------------------------------------------------
// 2025/1학기 STL
// 3.10 월요일	(1주차 2일)
//----------------------------------------------------------------------------
// 많은 수의 자료 다루기 - int -> Dog
//----------------------------------------------------------------------------
#include<iostream>
#include"save.h"

//[문제] random한 int 1000개를 화면에 출력하라


int main() {
	for (int i = 0; i < 1000;++i) {
		std::cout << rand() << '\n';
	}
	
	save("main.cpp");

}



==============================================================================================================================
저장한 시간: 2025-03-17 오후 5:44:10, 월요일
==============================================================================================================================

//----------------------------------------------------------------------------
// 2025/1학기 STL
// 3.10 월요일	(1주차 2일)
//----------------------------------------------------------------------------
// 많은 수의 자료 다루기 - int -> Dog
//----------------------------------------------------------------------------
#include<iostream>
#include"save.h"

#include<random>

//[문제] random한 int 1000개를 화면에 출력하라
std::mt19937_64 dre;
std::uniform_int_distribution uid;

int main() {
	for (int i = 0; i < 1000;++i) {
		std::cout << uid(dre) << '\n';
	}
	
	save("main.cpp");

}



==============================================================================================================================
저장한 시간: 2025-03-17 오후 5:45:42, 월요일
==============================================================================================================================

//----------------------------------------------------------------------------
// 2025/1학기 STL
// 3.10 월요일	(1주차 2일)
//----------------------------------------------------------------------------
// 많은 수의 자료 다루기 - int -> Dog
//----------------------------------------------------------------------------
#include<iostream>
#include"save.h"

#include<random>

//[문제] random한 int 1000개를 화면에 출력하라
std::mt19937_64 dre;
std::uniform_int_distribution uid(0, 99'999'999);

int main() {
	for (int i = 0; i < 1000;++i) {
		std::cout << uid(dre) << '\n';
	}
	
	save("main.cpp");

}



==============================================================================================================================
저장한 시간: 2025-03-17 오후 5:46:12, 월요일
==============================================================================================================================

//----------------------------------------------------------------------------
// 2025/1학기 STL
// 3.10 월요일	(1주차 2일)
//----------------------------------------------------------------------------
// 많은 수의 자료 다루기 - int -> Dog
//----------------------------------------------------------------------------
#include<iostream>
#include"save.h"

#include<random>

//[문제] random한 int 1000개를 화면에 출력하라
std::mt19937_64 dre;
std::uniform_int_distribution uid(0, 99'999'999);

int main() {
	for (int i = 0; i < 1000;++i) {
		std::cout << uid(dre) << ' ';
	}
	
	save("main.cpp");

}



==============================================================================================================================
저장한 시간: 2025-03-17 오후 5:48:37, 월요일
==============================================================================================================================

//----------------------------------------------------------------------------
// 2025/1학기 STL
// 3.10 월요일	(1주차 2일)
//----------------------------------------------------------------------------
// 많은 수의 자료 다루기 - int -> Dog
//----------------------------------------------------------------------------
#include<iostream>
#include"save.h"

#include<random>
#include<print>

//[문제] random한 int 1000개를 화면에 출력하라
std::mt19937_64 dre;
std::uniform_int_distribution uid(0, 99'999'999);

int main() {
	for (int i = 0; i < 1000;++i) {
		std::print("{:10}", uid(dre));
	}
	
	save("main.cpp");

}



==============================================================================================================================
저장한 시간: 2025-03-17 오후 5:49:47, 월요일
==============================================================================================================================

//----------------------------------------------------------------------------
// 2025/1학기 STL
// 3.10 월요일	(1주차 2일)
//----------------------------------------------------------------------------
// 많은 수의 자료 다루기 - int -> Dog
//----------------------------------------------------------------------------
#include<iostream>
#include"save.h"

#include<random>
#include<print>

//[문제] random한 int 1000개를 화면에 출력하라
std::mt19937_64 dre;
std::uniform_int_distribution uid(0, 99'999'999);

int main() {
	for (int i = 0; i < 1000;++i) {
		std::print("{:<10}", uid(dre));
	}
	
	save("main.cpp");

}



==============================================================================================================================
저장한 시간: 2025-03-17 오후 5:50:37, 월요일
==============================================================================================================================

//----------------------------------------------------------------------------
// 2025/1학기 STL
// 3.10 월요일	(1주차 2일)
//----------------------------------------------------------------------------
// 많은 수의 자료 다루기 - int -> Dog
//----------------------------------------------------------------------------
#include<iostream>
#include"save.h"

#include<random>
#include<print>

//[문제] random한 int 1000개를 화면에 출력하라
std::mt19937_64 dre;
std::uniform_int_distribution uid(0, 99'999'999);

int main() {
	for (int i = 0; i < 1000;++i) {
		std::print("{:^10}", uid(dre));
	}
	
	save("main.cpp");

}



==============================================================================================================================
저장한 시간: 2025-03-17 오후 5:51:40, 월요일
==============================================================================================================================

//----------------------------------------------------------------------------
// 2025/1학기 STL
// 3.10 월요일	(1주차 2일)
//----------------------------------------------------------------------------
// 많은 수의 자료 다루기 - int -> Dog
//----------------------------------------------------------------------------
#include<iostream>
#include"save.h"

#include<random>
#include<print>

//[문제] random한 int 1000개를 화면에 출력하라
std::mt19937_64 dre;
std::uniform_int_distribution uid(0, 9'999'999);

int main() {
	for (int i = 0; i < 1000;++i) {
		std::print("{:8}", uid(dre));
	}
	
	save("main.cpp");

}



==============================================================================================================================
저장한 시간: 2025-03-17 오후 6:04:03, 월요일
==============================================================================================================================

//----------------------------------------------------------------------------
// 2025/1학기 STL
// 3.10 월요일	(1주차 2일)
//----------------------------------------------------------------------------
// 많은 수의 자료 다루기 - int -> Dog
//----------------------------------------------------------------------------
#include<iostream>
#include"save.h"

#include<random>
#include<print>


std::mt19937_64 dre;
std::uniform_int_distribution uid(0, 9'999'999);


//[문제]랜덤값 1000개를 메모리에 저장하라
//저장한 값 중ㅇ 가장 큰 값을 찾아 출력하라
int main() {
	int arr[1000];
	int maximum = std::numeric_limits<int>::min();
	for (int i = 0; i < 1000;++i) {
		arr[i] = uid(dre);
		if (arr[i] > maximum) {
			maximum = arr[i];
		}
	}
	std::cout << maximum;
	save("main.cpp");

}



==============================================================================================================================
저장한 시간: 2025-03-17 오후 6:04:58, 월요일
==============================================================================================================================

//----------------------------------------------------------------------------
// 2025/1학기 STL
// 3.10 월요일	(1주차 2일)
//----------------------------------------------------------------------------
// 많은 수의 자료 다루기 - int -> Dog
//----------------------------------------------------------------------------
#include<iostream>
#include"save.h"

#include<random>
#include<print>
#include<array>


std::mt19937_64 dre;
std::uniform_int_distribution uid(0, 9'999'999);


//[문제]랜덤값 1000개를 메모리에 저장하라
//저장한 값 중ㅇ 가장 큰 값을 찾아 출력하라
int main() {
	std::array<int, 1000> arr;
	int maximum = std::numeric_limits<int>::min();
	for (int i = 0; i < 1000;++i) {
		arr[i] = uid(dre);
		if (arr[i] > maximum) {
			maximum = arr[i];
		}
	}
	std::cout << maximum << '\n';
	save("main.cpp");

}



==============================================================================================================================
저장한 시간: 2025-03-17 오후 6:13:07, 월요일
==============================================================================================================================

//----------------------------------------------------------------------------
// 2025/1학기 STL
// 3.10 월요일	(1주차 2일)
//----------------------------------------------------------------------------
// 많은 수의 자료 다루기 - int -> Dog
//----------------------------------------------------------------------------
#include<iostream>
#include"save.h"

#include<random>
#include<array>


std::mt19937_64 dre;
std::uniform_int_distribution uid(0, 9'999'999);


//[문제]랜덤값 1000개를 메모리에 저장하라
//저장한 값 중 가장 큰 값을 찾아 출력하라
int main() {
	std::array<int, 1000> arr;
	
	for (int i = 0; i < 1000;++i) {
		arr[i] = uid(dre);
	}
	int maximum = arr.max_size();
	std::cout << maximum << '\n';
	save("main.cpp");

}



==============================================================================================================================
저장한 시간: 2025-03-17 오후 6:14:07, 월요일
==============================================================================================================================

//----------------------------------------------------------------------------
// 2025/1학기 STL
// 3.10 월요일	(1주차 2일)
//----------------------------------------------------------------------------
// 많은 수의 자료 다루기 - int -> Dog
//----------------------------------------------------------------------------
#include<iostream>
#include"save.h"

#include<random>
#include<array>


std::mt19937_64 dre;
std::uniform_int_distribution uid(0, 9'999'999);


//[문제]랜덤값 1000개를 메모리에 저장하라
//저장한 값 중 가장 큰 값을 찾아 출력하라
int main() {
	std::array<int, 1000> arr;
	int maximum{ std::numeric_limits<int>::min() };
	for (int i = 0; i < 1000;++i) {
		arr[i] = uid(dre);
		
	}
	for (int i = 0; i < 1000; ++i) {
		if (maximum < arr[i])
			maximum = arr[i];

	}
	std::cout << maximum << '\n';
	save("main.cpp");

}



==============================================================================================================================
저장한 시간: 2025-03-17 오후 6:18:15, 월요일
==============================================================================================================================

//----------------------------------------------------------------------------
// 2025/1학기 STL
// 3.10 월요일	(1주차 2일)
//----------------------------------------------------------------------------
// 많은 수의 자료 다루기 - int -> Dog
//----------------------------------------------------------------------------
#include<iostream>
#include"save.h"

#include<random>
#include<array>


std::mt19937_64 dre{ std::random_device{}() };
std::uniform_int_distribution uid(0, 9'999'999);


//[문제]랜덤값 1000개를 메모리에 저장하라
//저장한 값 중 가장 큰 값을 찾아 출력하라
int main() {
	std::array<int, 1000> arr;
	int maximum{ std::numeric_limits<int>::min() };
	for (int i = 0; i < 1000;++i) {
		arr[i] = uid(dre);
		
	}
	for (int i = 0; i < 1000; ++i) {
		if (maximum < arr[i])
			maximum = arr[i];

	}
	std::cout << maximum << '\n';
	save("main.cpp");

}



==============================================================================================================================
저장한 시간: 2025-03-17 오후 6:25:31, 월요일
==============================================================================================================================

//----------------------------------------------------------------------------
// 2025/1학기 STL
// 3.10 월요일	(1주차 2일)
//----------------------------------------------------------------------------
// 많은 수의 자료 다루기 - int -> Dog
//----------------------------------------------------------------------------
#include<iostream>
#include"save.h"

#include<random>
#include<array>


std::mt19937_64 dre{ };
std::uniform_int_distribution uid(0, 9'999'999);


//[문제]랜덤값 1000개를 메모리에 저장하라
//저장한 값 중 가장 큰 값을 찾아 출력하라
int main() {
	std::array<int, 1000> arr;
	int maximum{ std::numeric_limits<int>::min() };
	for (int i = 0; i < 1000;++i) {
		arr[i] = uid(dre);
		
	}
	
	for (int i = 0; i < 1000; ++i) {
		if (maximum < arr[i])
			maximum = arr[i];

	}
	std::cout << maximum << '\n';
	save("main.cpp");

}



==============================================================================================================================
저장한 시간: 2025-03-17 오후 6:25:36, 월요일
==============================================================================================================================

//----------------------------------------------------------------------------
// 2025/1학기 STL
// 3.10 월요일	(1주차 2일)
//----------------------------------------------------------------------------
// 많은 수의 자료 다루기 - int -> Dog
//----------------------------------------------------------------------------
#include<iostream>
#include"save.h"

#include<random>
#include<array>


std::mt19937_64 dre{ };
std::uniform_int_distribution uid(0, 9'999'999);


//[문제]랜덤값 1000개를 메모리에 저장하라
//저장한 값 중 가장 큰 값을 찾아 출력하라
int main() {
	std::array<int, 1000> arr;
	int maximum{ std::numeric_limits<int>::min() };
	for (int i = 0; i < 1000;++i) { // 1000- magic number, hard-wired coding
		arr[i] = uid(dre);
		
	}
	
	for (int i = 0; i < 1000; ++i) {
		if (maximum < arr[i])
			maximum = arr[i];

	}
	std::cout << maximum << '\n';
	save("main.cpp");

}



==============================================================================================================================
저장한 시간: 2025-03-17 오후 6:30:48, 월요일
==============================================================================================================================

//----------------------------------------------------------------------------
// 2025/1학기 STL
// 3.10 월요일	(1주차 2일)
//----------------------------------------------------------------------------
// 많은 수의 자료 다루기 - int -> Dog
//----------------------------------------------------------------------------
#include<iostream>
#include"save.h"

#include<random>
#include<array>


std::mt19937_64 dre{ };
std::uniform_int_distribution uid(0, 9'999'999);


//[문제]랜덤값 1000개를 메모리에 저장하라
//저장한 값 중 가장 큰 값을 찾아 출력하라
int main() {
	std::array<int, 1000> arr;
	int maximum{ std::numeric_limits<int>::min() };
	for (int& num : arr) {
		num = uid(dre);
		
	}
	
	for (int num : arr) {
		if (maximum < num)
			maximum = num;
	}

	std::cout << maximum << '\n';
	save("main.cpp");

}



==============================================================================================================================
저장한 시간: 2025-03-17 오후 6:40:14, 월요일
==============================================================================================================================

//----------------------------------------------------------------------------
// 2025/1학기 STL
// 3.10 월요일	(1주차 2일)
//----------------------------------------------------------------------------
// 많은 수의 자료 다루기 - int -> Dog
//----------------------------------------------------------------------------
#include<iostream>
#include"save.h"

#include<random>
#include<array>
#include<print>
#include<algorithm>


std::mt19937_64 dre{ };
std::uniform_int_distribution uid(0, 9'999'999);


//[문제]랜덤값 1000개를 메모리에 저장하라
//저장한 값 중 가장 큰 값을 찾아 출력하라
int main() {
	std::array<int, 1000> arr;
	int maximum{ std::numeric_limits<int>::min() };
	for (int& num : arr) {
		num = uid(dre);
		
	}
	
	std::max_element(arr.begin(), arr.end());

	for (int num : arr) {
		std::print("{:8}", num);
	}

	std::cout << maximum << '\n';
	save("main.cpp");

}



==============================================================================================================================
저장한 시간: 2025-03-17 오후 6:42:42, 월요일
==============================================================================================================================

//----------------------------------------------------------------------------
// 2025/1학기 STL
// 3.10 월요일	(1주차 2일)
//----------------------------------------------------------------------------
// 많은 수의 자료 다루기 - int -> Dog
//----------------------------------------------------------------------------
#include<iostream>
#include"save.h"

#include<random>
#include<array>
#include<print>
#include<algorithm>


std::mt19937_64 dre{ };
std::uniform_int_distribution uid(0, 9'999'999);


//[문제]랜덤값 1000개를 메모리에 저장하라
//저장한 값 중 가장 큰 값을 찾아 출력하라
int main() {
	std::array<int, 1000> arr;
	for (int& num : arr) {
		num = uid(dre);
		
	}
	
	auto pos = std::max_element(arr.begin(), arr.end());

	for (int num : arr) {
		std::print("{:8}", num);
	}

	std::cout << *pos << '\n';
	save("main.cpp");

}



==============================================================================================================================
저장한 시간: 2025-03-17 오후 6:43:32, 월요일
==============================================================================================================================

//----------------------------------------------------------------------------
// 2025/1학기 STL
// 3.10 월요일	(1주차 2일)
//----------------------------------------------------------------------------
// 많은 수의 자료 다루기 - int -> Dog
//----------------------------------------------------------------------------
#include<iostream>
#include"save.h"

#include<random>
#include<array>
#include<print>
#include<algorithm>


std::mt19937_64 dre{ };
std::uniform_int_distribution uid(0, 9'999'999);


//[문제]랜덤값 1000개를 메모리에 저장하라
//저장한 값 중 가장 큰 값을 찾아 출력하라
int main() {
	std::array<int, 1000> arr;
	for (int& num : arr) {
		num = uid(dre);
		
	}
	
	auto pos = std::max_element(arr.begin(), arr.end());

	for (int num : arr) {
		std::print("{:8}", num);
	}

	std::cout << *pos << '\n';
	save("main.cpp");

}



==============================================================================================================================
저장한 시간: 2025-03-17 오후 6:45:16, 월요일
==============================================================================================================================

//----------------------------------------------------------------------------
// 2025/1학기 STL
// 3.10 월요일	(1주차 2일)
//----------------------------------------------------------------------------
// 많은 수의 자료 다루기 - int -> Dog
//----------------------------------------------------------------------------
#include<iostream>
#include"save.h"

#include<random>
#include<array>
#include<print>
#include<algorithm>


std::mt19937_64 dre{ };
std::uniform_int_distribution uid(0, 9'999'999);


//[문제]랜덤값 1000개를 메모리에 저장하라
//저장한 값 중 가장 큰 값을 찾아 출력하라
int main() {
	std::array<int, 1000> arr;

	for (int& num : arr) 
		num = uid(dre);
		
	std::cout << *std::max_element(arr.begin(), arr.end()) << '\n';
	save("main.cpp");

}



==============================================================================================================================
저장한 시간: 2025-03-17 오후 6:47:37, 월요일
==============================================================================================================================

//----------------------------------------------------------------------------
// 2025/1학기 STL
// 3.10 월요일	(1주차 2일)
//----------------------------------------------------------------------------
// 많은 수의 자료 다루기 - int -> Dog
//----------------------------------------------------------------------------
#include<iostream>
#include"save.h"

#include<random>
#include<array>
#include<print>
#include<algorithm>
#include<fstream>


std::mt19937_64 dre{ };
std::uniform_int_distribution uid(0, 9'999'999);


//[문제]랜덤값 1000개를 파일 "int 1000개.txt" 에 저장하라
//저장한 파일은 사람이 읽을 수 있어야 한다.
//나중에 파일에서 int값을 읽어올 수 있어야 한다.
int main() {
	std::array<int, 1000> arr;

	for (int& num : arr) 
		num = uid(dre);
	std::ofstream out{ "int 1000개.txt" };

	for (int num : arr)
		out << num << " ";

	save("main.cpp");

}



==============================================================================================================================
저장한 시간: 2025-03-17 오후 6:53:16, 월요일
==============================================================================================================================

//----------------------------------------------------------------------------
// 2025/1학기 STL
// 3.10 월요일	(1주차 2일)
//----------------------------------------------------------------------------
// 많은 수의 자료 다루기 - int -> Dog
//----------------------------------------------------------------------------
#include<iostream>
#include"save.h"

#include<random>
#include<array>
#include<fstream>


std::mt19937_64 dre{ };
std::uniform_int_distribution uid(0, 9'999'999);


//[문제]랜덤값 1000개를 파일 "int 1000개.txt" 에 저장하라
//저장한 파일은 사람이 읽을 수 있어야 한다.
//나중에 파일에서 int값을 읽어올 수 있어야 한다.
int main() {

	std::ofstream out{ "int 1000개.txt" };

	for (int i =0; i<1000;++i)
		out << uid(dre) << " ";

	save("main.cpp");

}



==============================================================================================================================
저장한 시간: 2025-03-17 오후 6:56:07, 월요일
==============================================================================================================================

//----------------------------------------------------------------------------
// 2025/1학기 STL
// 3.10 월요일	(1주차 2일)
//----------------------------------------------------------------------------
// 많은 수의 자료 다루기 - int -> Dog
//----------------------------------------------------------------------------
#include<iostream>
#include"save.h"

#include<random>
#include<array>
#include<fstream>


std::mt19937_64 dre{ };
std::uniform_int_distribution uid(0, 9'999'999);


//[문제]랜덤값 1000개를 파일 "int 1000개.txt" 에 저장하라
//저장한 파일은 사람이 읽을 수 있어야 한다.
//나중에 파일에서 int값을 읽어올 수 있어야 한다.
int main() {

	std::ofstream out{ "int 1000개.txt" };

	for (int i =0; i<1000;++i)
		out << uid(dre) << " --- ";//---는 구분자(딜리미터)

	save("main.cpp");

}



==============================================================================================================================
저장한 시간: 2025-03-17 오후 6:57:26, 월요일
==============================================================================================================================

//----------------------------------------------------------------------------
// 2025/1학기 STL
// 3.10 월요일	(1주차 2일)
//----------------------------------------------------------------------------
// 많은 수의 자료 다루기 - int -> Dog
//----------------------------------------------------------------------------
#include<iostream>
#include"save.h"

#include<random>
#include<array>
#include<print>
#include<fstream>


std::mt19937_64 dre{ };
std::uniform_int_distribution uid(0, 9'999'999);


//[문제]랜덤값 1000개를 파일 "int 1000개.txt" 에 저장하라
//저장한 파일은 사람이 읽을 수 있어야 한다.
//나중에 파일에서 int값을 읽어올 수 있어야 한다.
int main() {

	std::ofstream out{ "int 1000개.txt" };

	for (int i = 0; i < 1000; ++i)
		std::print(out, "{:80}", uid(dre));

	save("main.cpp");

}



==============================================================================================================================
저장한 시간: 2025-03-17 오후 6:58:48, 월요일
==============================================================================================================================

//----------------------------------------------------------------------------
// 2025/1학기 STL
// 3.10 월요일	(1주차 2일)
//----------------------------------------------------------------------------
// 많은 수의 자료 다루기 - int -> Dog
//----------------------------------------------------------------------------
#include<iostream>
#include"save.h"

#include<random>
#include<array>
#include<print>
#include<fstream>


std::mt19937_64 dre{ };
std::uniform_int_distribution uid(0, 9'999'999);


//[문제]랜덤값 1000개를 파일 "int 1000개.txt" 에 저장하라
//저장한 파일은 사람이 읽을 수 있어야 한다.
//나중에 파일에서 int값을 읽어올 수 있어야 한다.
int main() {

	std::ofstream out{ "int 1000개.txt" };
	int counter{};
	for (int i = 0; i < 1000; ++i) {
		std::print(out, "{:80}", uid(dre));
		if (0 == ++counter & 10) {
			out << "\n";
		}
	}
	save("main.cpp");

}



==============================================================================================================================
저장한 시간: 2025-03-17 오후 6:59:06, 월요일
==============================================================================================================================

//----------------------------------------------------------------------------
// 2025/1학기 STL
// 3.10 월요일	(1주차 2일)
//----------------------------------------------------------------------------
// 많은 수의 자료 다루기 - int -> Dog
//----------------------------------------------------------------------------
#include<iostream>
#include"save.h"

#include<random>
#include<array>
#include<print>
#include<fstream>


std::mt19937_64 dre{ };
std::uniform_int_distribution uid(0, 9'999'999);


//[문제]랜덤값 1000개를 파일 "int 1000개.txt" 에 저장하라
//저장한 파일은 사람이 읽을 수 있어야 한다.
//나중에 파일에서 int값을 읽어올 수 있어야 한다.
int main() {

	std::ofstream out{ "int 1000개.txt" };
	int counter{};
	for (int i = 0; i < 1000; ++i) {
		std::print(out, "{:80}", uid(dre));
		if (0 == (++counter & 10)) {
			out << "\n";
		}
	}
	save("main.cpp");

}

